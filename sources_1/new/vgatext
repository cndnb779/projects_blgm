library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity text_generator is
    Port (
        clk : in STD_LOGIC;
        active_video : in STD_LOGIC;
        pixel_x : in std_logic_vector(9 downto 0);
        pixel_y : in std_logic_vector(9 downto 0);
        text_rgb : out std_logic_vector(11 downto 0);
        char_string : in std_logic_vector(79 downto 0)  -- 10 characters, each 8 bits wide
    );
end text_generator;

architecture Behavioral of text_generator is
    signal row_address : std_logic_vector(3 downto 0);
    signal data_word : std_logic_vector(7 downto 0);
    signal rom_address : std_logic_vector(10 downto 0);
    signal bit_addr : std_logic_vector(2 downto 0);
    signal data_bit, text_bit : std_logic;
    signal bit_address_inletter : std_logic_vector(2 downto 0);
    signal char_address : std_logic_vector(6 downto 0);
    signal char_index : std_logic_vector(3 downto 0); -- Character index in the string

    component ascii_to_pixel_converter is
        Port (
            clk_in : in std_logic;
            data_out : out std_logic_vector(7 downto 0);
            rom_address : in std_logic_vector(10 downto 0)
        );
    end component;
begin
    c1: ascii_to_pixel_converter
        Port map(
            clk_in => clk,
            data_out => data_word,
            rom_address => rom_address
        );

    -- Calculate character index and pixel within character
    char_index <= pixel_x(9 downto 3);
    row_address <= pixel_y(2 downto 0);
    bit_address_inletter <= pixel_x(2 downto 0);

    -- Map character index to address in the text string
    char_address <= char_string(to_integer(unsigned(char_index)) * 8 + 7 downto to_integer(unsigned(char_index)) * 8);

    rom_address <= char_address & row_address;
    data_bit <= data_word(to_integer(unsigned(not bit_address_inletter)));

    -- Check if the current pixel is part of an active character region
    text_bit <= data_bit when active_video = '1' else '0';

    process(clk)
    begin
        if rising_edge(clk) then
            if active_video = '0' then
                text_rgb <= "000000000000"; -- black
            elsif text_bit = '1' then
                text_rgb <= "111111111111"; -- white
            else
                text_rgb <= "000000000000"; -- black
            end if;
        end if;
    end process;
end Behavioral;
